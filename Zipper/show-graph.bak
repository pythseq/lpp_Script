#!/usr/bin/python
#coding:utf-8
# Author:   --<>
# Purpose: 
# Created: 2013/8/28


from lpp import *
import networkx as nx
import matplotlib.pyplot as plt
G = nx.DiGraph()
#进行overlap图创建，整合后这部分代码删除


libary=string.maketrans('+-','-+')
#将best.edges的数据打入内存
overlap_3_network =Ddict()
overlap_5_network = Ddict()

#进行overlap图创建，整合后这部分代码删除
def get_value( data ):
    global overlap_3_network,overlap_5_network
    for i in xrange(0,len(data)-1):
        if data[i][0] =='0' or data[i+1][0] =='0':
            continue
        overlap_3_network[ data[i] ][ data[i+1] ] = ''
    for i in xrange( 1,len( data )  ):
        if data[i][0] =='0' or data[i-1][0] =='0':
            continue		
        overlap_5_network[ data[i] ] [ data[i-1]  ] = ''	
for line in open( sys.argv[1],'rU'):
    if '#' in line:
        continue
    data = []
    line_l = line[:-1].split('\t')
    if line_l[3] =="5'":
        tag = '-'
    else:
        tag = '+'

    data.append(  line_l[2]+tag  )
    data.append( line_l[0]+'+'  )
    if line_l[5] =="5'":
        tag = '+'
    else:
        tag = '-'
    data.append( line_l[-2]+tag )

    get_value( data  )

    new_data = [ i.translate( libary )  for i in data[::-1]    ]

    get_value( new_data )

DATA = open( sys.argv[2],'rU'  )
graph_work = Ddict()
rela_5 = {}
rela_3 = {}

for line in DATA:
    line_l = line.strip().split('\t')
    name = line_l[0]
    adapter_5 = line_l[1]
    adapter_3 = line_l[2]
    if '+' not in name and '-' not in name:
        name = name +'+'
    rela_3[ adapter_3 ] = name
    rela_5[ adapter_5 ] = name
    graph_work[ name ]['5']=adapter_5
    graph_work[name]['3'] = adapter_3

    adapter_3 = line_l[1].translate(  libary )
    adapter_5 = line_l[2].translate(  libary )
    name = name .translate(  libary )
    rela_3[ adapter_3 ] = name
    rela_5[ adapter_5 ] = name
    graph_work[ name ]['5']=adapter_5
    graph_work[name]['3'] = adapter_3	
has = {}
overlap_rela = Ddict()
def creeper_3( node ):
    global has

    for each_reads in  sorted(overlap_3_network[  graph_work[node]['3']      ]):
        if each_reads == sorted(overlap_3_network[  graph_work[node]['3']      ])[-1]:
            has[ node ] = ''                  
        if each_reads in rela_5:
            new_node = rela_5[ each_reads  ]
            overlap_rela[ node[:-1]  ][ new_node[:-1]   ] = ''

            if new_node in has:
                return ""
            else:
                creeper_3( new_node )

def creeper_5( node ):
    global has
    for each_reads in  sorted(overlap_5_network[  graph_work[node]['5']      ]):
        if each_reads == sorted(overlap_5_network[  graph_work[node]['5']      ])[-1]:
            has[ node ] = '' 
        if each_reads in rela_3:
            new_node = rela_3[ each_reads  ]
            overlap_rela[ node[:-1]  ][ new_node[:-1]   ] = ''
			
            if new_node in has:
                return ""
            else:
                creeper_5( new_node )
for node in graph_work:
    G.add_node( node[:-1]  )
    creeper_3(node)
has = {}
for node in graph_work:
    G.add_node( node[:-1]  )
    creeper_5(node)

for key1 in overlap_rela:
    for key2 in overlap_rela[key1]:
        G.add_edge( key1,key2   )
pos = nx.spring_layout( G )
nx.draw_networkx_nodes(G,pos,node_size=60)
nx.draw_networkx_edges(G,pos)
nx.draw_networkx_labels(G,pos,font_size=5,font_family='sans-serif',alpha =10)
plt.axis('off')
plt.savefig(sys.argv[3]) # save as png
plt.show() # display
